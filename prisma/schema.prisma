generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PaymentSchedule {
  id                String      @id @default(uuid())
  due_date         DateTime
  expected_amount  Float
  paid_amount      Float       @default(0)
  principal        Float
  interest         Float
  installment_number Int
  remaining_balance Float       @default(0)
  loanAmount       Float      @default(0)
  status           String      // PENDING, PAID, PARTIAL, OVERDUE
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  prestamoId       String
  prestamo         PrestamoNew @relation(fields: [prestamoId], references: [id])

  @@index([prestamoId])
}

model PrestamoNew {
  id                     String            @id @default(uuid())
  amount                 Float
  description            String?
  status                 String            @default("PENDING")
  request_date           DateTime          @default(now()) @map("request_date")
  monthly_interest       Float             @default(0) @map("monthly_interest")
  number_of_installments Int               @default(1) @map("number_of_installments")
  approved              Boolean           @default(false)
  rejected              Boolean           @default(false)
  rejection_reason      String?           @map("rejection_reason")
  paid                  Boolean           @default(false)
  remaining_amount      Float             @map("remaining_amount")
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  juntaId               String
  memberId              String
  original_prestamo_id  String?           @map("original_prestamo_id")
  affects_capital       Boolean           @default(true) @map("affects_capital")
  avalId                String?
  capital_at_time       Float             @map("capital_at_time")
  capital_snapshot      Json?             @map("capital_snapshot")
  form_cost             Float             @default(2.0) @map("form_cost")
  form_purchased        Boolean           @default(false) @map("form_purchased")
  guarantee_detail      String?           @map("guarantee_detail")
  guarantee_type        String            @map("guarantee_type")
  loan_code             String            @map("loan_code")
  loan_number           Int               @map("loan_number")
  payment_type          String            @map("payment_type")
  reason                String
  loan_type             String            @map("loan_type")
  agendaItemId          String?

  capital_movements     CapitalMovement[]
  pagos                 PagoPrestamoNew[]
  paymentSchedule       PaymentSchedule[]
  aval                  User?             @relation("Aval", fields: [avalId], references: [id])
  junta                 Junta             @relation(fields: [juntaId], references: [id])
  member                User              @relation(fields: [memberId], references: [id])
  agendaItem           AgendaItem?       @relation(fields: [agendaItemId], references: [id])

  @@unique([juntaId, loan_number])
  @@index([agendaItemId])
  @@index([memberId])
  @@index([avalId])
  @@index([juntaId])
}

model Accion {
  id                String            @id @default(uuid())
  type              String
  amount            Float
  shareValue        Float             
  description       String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  juntaId           String
  memberId          String
  affects_capital   Boolean           @default(true) @map("affects_capital")
  agendaItemId      String?
  
  junta             Junta             @relation(fields: [juntaId], references: [id])
  member            User              @relation(fields: [memberId], references: [id])
  capital_movements CapitalMovement[]
  agendaItem        AgendaItem?       @relation(fields: [agendaItemId], references: [id])

  @@index([juntaId, createdAt])
  @@index([memberId])
  @@index([agendaItemId])
}

model Multa {
  id                String            @id @default(uuid())
  amount            Float
  description       String
  status            String            @default("PENDING")
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  juntaId           String
  memberId          String
  affects_capital   Boolean           @default(true) @map("affects_capital")
  agendaItemId      String?

  capital_movements CapitalMovement[]
  junta             Junta             @relation(fields: [juntaId], references: [id])
  member            User              @relation(fields: [memberId], references: [id])
  agendaItem        AgendaItem?       @relation(fields: [agendaItemId], references: [id])

  @@index([juntaId])
  @@index([memberId])
  @@index([agendaItemId])
}

model PagoPrestamoNew {
  id                String            @id @default(uuid())
  amount            Float
  capital_amount    Float             @default(0) 
  interest_amount   Float             @default(0) 
  date              DateTime          @default(now())
  prestamoId        String
  original_pago_id  String?           @map("original_pago_id")
  affects_capital   Boolean           @default(true) @map("affects_capital")
  agendaItemId      String?
installment_number  Int?              @default(0) 
  capital_movements CapitalMovement[]
  prestamo          PrestamoNew       @relation(fields: [prestamoId], references: [id])
  agendaItem        AgendaItem?       @relation(fields: [agendaItemId], references: [id])

  @@index([prestamoId])
  @@index([original_pago_id])
  @@index([agendaItemId])
}

model AgendaItem {
  id            String          @id @default(uuid())
  title         String
  description   String?
  weekStartDate DateTime        // Start date of the week
  weekEndDate   DateTime        // End date of the week
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  juntaId       String
  
  junta         Junta           @relation(fields: [juntaId], references: [id])
  daySchedules  DaySchedule[]
  dailyAttendance DailyAttendance[]
  users         User[]          @relation("UserAgendaItems")
  
  // Other existing relations...
  multas        Multa[]           
  acciones      Accion[]          
  prestamos     PrestamoNew[]     
  pagos         PagoPrestamoNew[]

  @@index([juntaId])
}

model DaySchedule {
  id            String         @id @default(uuid())
  dayOfWeek     String        // Changed from DayOfWeek enum to String
  startTime     DateTime
  endTime       DateTime
  agendaItemId  String
  
  agendaItem    AgendaItem    @relation(fields: [agendaItemId], references: [id])
  attendance    DailyAttendance[]

  @@unique([agendaItemId, dayOfWeek]) // Ensure one schedule per day per agenda item
  @@index([agendaItemId])
}

model DailyAttendance {
  id            String       @id @default(uuid())
  agendaItemId  String
  userId        String
  dayScheduleId String
  attended      Boolean      @default(false)
  date          DateTime
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  agendaItem    AgendaItem   @relation(fields: [agendaItemId], references: [id])
  user          User         @relation(fields: [userId], references: [id])
  daySchedule   DaySchedule  @relation(fields: [dayScheduleId], references: [id])

  @@unique([userId, agendaItemId, dayScheduleId]) // One attendance record per user per day per agenda item
  @@index([agendaItemId])
  @@index([userId])
  @@index([dayScheduleId])
}

model User {
  id                          String        @id @default(uuid())
  email                       String?       @unique
  username                    String        @unique
  password                    String        @default("$2b$10$6jXzYyNVXB5V6863yxGIzOC5D.yqNoE1lO9H.hU4UYVKiV5BOh2S6")
  role                        String        @default("USER")
  document_type               String?       @map("document_type")
  document_number             String?       @map("document_number")
  full_name                   String?       @map("full_name")
  birth_date                  DateTime?     @map("birth_date")
  address                     String?
  createdAt                   DateTime      @default(now())
  updatedAt                   DateTime      @updatedAt
  phone                       String
  additional_info             String?       @map("additional_info")
  beneficiary_address         String?       @map("beneficiary_address")
  beneficiary_document_number String?       @map("beneficiary_document_number")
  beneficiary_document_type   String?       @map("beneficiary_document_type")
  beneficiary_full_name       String?       @map("beneficiary_full_name")
  beneficiary_phone           String?       @map("beneficiary_phone")
  gender                      String?
  join_date                   DateTime?     @map("join_date")
  member_role                 String?       @map("member_role")
  productive_activity         String?       @map("productive_activity")
  status                      String        @default("Activo")

  acciones                    Accion[]
  createdJuntas               Junta[]       @relation("CreatedBy")
  memberJuntas                JuntaMember[]
  multas                      Multa[]
  prestamos                   Prestamo[]
  avalPrestamos               PrestamoNew[] @relation("Aval")
  prestamos_new               PrestamoNew[]
  agendaItems                 AgendaItem[]  @relation("UserAgendaItems")
   dailyAttendance            DailyAttendance[] 
}

model JuntaMember {
  id       String   @id @default(uuid())
  juntaId  String
  userId   String
  joinedAt DateTime @default(now())
  
  junta    Junta    @relation(fields: [juntaId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@unique([juntaId, userId])
  @@index([juntaId])
  @@index([userId])
}

model Junta {
  id                String            @id @default(uuid())
  name              String
  description       String?
  fecha_inicio      DateTime          @map("fecha_inicio")
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  createdById       String
  available_capital Float             @default(0) @map("available_capital")
  base_capital      Float             @default(0) @map("base_capital")
  current_capital   Float             @default(0) @map("current_capital")

  acciones          Accion[]
  agenda            AgendaItem[]
  capital_movements CapitalMovement[]
  capital           CapitalSocial?
  createdBy         User              @relation("CreatedBy", fields: [createdById], references: [id])
  members           JuntaMember[]
  multas            Multa[]
  prestamos         Prestamo[]
  prestamos_new     PrestamoNew[]

  @@index([createdById])
}

model CapitalSocial {
  id        String           @id @default(uuid())
  amount    Float            @default(0)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  juntaId   String          @unique

  junta     Junta            @relation(fields: [juntaId], references: [id])
  gastos    GastoCapital[]
  ingresos  IngresoCapital[]
}

model IngresoCapital {
  id              String        @id @default(uuid())
  amount          Float
  description     String
  date            DateTime      @default(now())
  capitalSocialId String
  
  capitalSocial   CapitalSocial @relation(fields: [capitalSocialId], references: [id])

  @@index([capitalSocialId])
}

model GastoCapital {
  id              String        @id @default(uuid())
  amount          Float
  description     String
  date            DateTime      @default(now())
  capitalSocialId String
  
  capitalSocial   CapitalSocial @relation(fields: [capitalSocialId], references: [id])

  @@index([capitalSocialId])
}

model CapitalMovement {
  id          String           @id @default(uuid())
  amount      Float
  type        String
  direction   String
  description String?
  createdAt   DateTime         @default(now())
  juntaId     String
  prestamoId  String?
  multaId     String?
  accionId    String?
  pagoId      String?

  accion      Accion?          @relation(fields: [accionId], references: [id])
  junta       Junta            @relation(fields: [juntaId], references: [id])
  multa       Multa?           @relation(fields: [multaId], references: [id])
  pago        PagoPrestamoNew? @relation(fields: [pagoId], references: [id])
  prestamo    PrestamoNew?     @relation(fields: [prestamoId], references: [id])

  @@index([juntaId, createdAt])
  @@index([type, direction])
  @@index([prestamoId])
  @@index([multaId])
  @@index([accionId])
  @@index([pagoId])
}

model Prestamo {
  id          String         @id @default(uuid())
  amount      Float
  description String?
  status      String         @default("PENDING")
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  juntaId     String
  memberId    String

  pagos       PagoPrestamo[]
  junta       Junta          @relation(fields: [juntaId], references: [id])
  member      User           @relation(fields: [memberId], references: [id])

  @@index([juntaId])
  @@index([memberId])
}

model PagoPrestamo {
  id         String   @id @default(uuid())
  amount     Float
  date       DateTime @default(now())
  prestamoId String
  
  prestamo   Prestamo @relation(fields: [prestamoId], references: [id])

  @@index([prestamoId])
}

// prisma/schema.prisma
model PerformanceMetric {
  id                Int      @id @default(autoincrement())
  type              String   // Metric type (LCP, TTI, etc.)
  value            Float    // The measured value
  pathname         String   // The page path where metric was collected
  searchParams     Json?    // URL search parameters, stored as JSON
  timestamp        DateTime // When the metric was recorded
  navigationStart  Float?   // Performance.now() at navigation start
  navigationDuration Float? // Time taken for navigation
  elementId        String?  // ID of the element (for LCP)
  elementTag       String?  // HTML tag of the element (for LCP)
  url              String   // Full URL where metric was collected
  userAgent        String?  // Browser user agent
  createdAt        DateTime @default(now())

  @@index([type, timestamp]) // Index for querying metrics by type and time
}