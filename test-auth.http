### Important Notes:
# 1. Backend runs on http://localhost:3000
# 2. Frontend runs on http://localhost:3001
# 3. All API requests should go to http://localhost:3000/api/...

### 1. Public Endpoints (no auth required)

### Health check
GET http://localhost:3000/api/health

### Get development token
GET http://localhost:3000/api/health/dev-token

### 2. User Management

### Get current user profile
GET http://localhost:3000/api/users/me
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VyXzJudDVwSm1CUDNkUTBxYXZsWGJSQUdMSVl4bSIsImlzcyI6Imh0dHBzOi8vbmF0aXZlLW11dHQtODAuY2xlcmsuYWNjb3VudHMuZGV2IiwiYXVkIjoiaHR0cDovL2xvY2FsaG9zdDozMDAxIiwiZXhwIjoxNzI5ODY5NzYxLCJpYXQiOjE3Mjk4NjYxNjEsImF6cCI6Imh0dHA6Ly9sb2NhbGhvc3Q6MzAwMSJ9.CVUJv6O8uJc1vIzp0f9_oHIKQNgpaxCGFzsyyQgAHQo

### Create a new user
POST http://localhost:3000/api/users
Authorization: Bearer your_token_here
Content-Type: application/json

{
  "document_type": "DNI",
  "document_number": "12345678",
  "first_name": "John",
  "last_name": "Doe",
  "birth_date": "1990-01-01",
  "province": "Lima",
  "district": "Miraflores",
  "address": "123 Main St"
}

### 3. Junta Management

### Create a new junta
POST http://localhost:3000/api/juntas
Authorization: Bearer your_token_here
Content-Type: application/json

{
  "name": "Primera Junta",
  "description": "Junta inicial para pruebas",
  "fecha_inicio": "2024-01-01"
}

### Get all juntas
GET http://localhost:3000/api/juntas
Authorization: Bearer your_token_here

### Get specific junta
GET http://localhost:3000/api/juntas/JUNTA_ID
Authorization: Bearer your_token_here

### Delete a junta
DELETE http://localhost:3000/api/juntas/JUNTA_ID
Authorization: Bearer your_token_here

### 4. Member Management

### Get all members of a junta
GET http://localhost:3000/api/members/JUNTA_ID
Authorization: Bearer your_token_here

### Add member to junta
POST http://localhost:3000/api/members/JUNTA_ID/add/DOCUMENT_NUMBER
Authorization: Bearer your_token_here

### Remove member from junta
DELETE http://localhost:3000/api/members/JUNTA_ID/MEMBER_ID
Authorization: Bearer your_token_here

### 5. Prestamos Management

### Get all prestamos of a junta
GET http://localhost:3000/api/prestamos/JUNTA_ID
Authorization: Bearer your_token_here

### Create a new prestamo
POST http://localhost:3000/api/prestamos/JUNTA_ID
Authorization: Bearer your_token_here
Content-Type: application/json

{
  "amount": 1000,
  "description": "PrÃ©stamo inicial",
  "memberId": "MEMBER_ID"
}

### Get prestamos by member
GET http://localhost:3000/api/prestamos/JUNTA_ID/member/MEMBER_ID
Authorization: Bearer your_token_here

### Frontend Integration Notes:

1. API Base URL:
   ```javascript
   const API_URL = 'http://localhost:3000/api';
   
   // Example: Get members
   const response = await fetch(`${API_URL}/members/${juntaId}`, {
     headers: {
       'Authorization': `Bearer ${token}`,
     },
   });

   // Example: Add member
   const response = await fetch(`${API_URL}/members/${juntaId}/add/${documentNumber}`, {
     method: 'POST',
     headers: {
       'Authorization': `Bearer ${token}`,
     },
   });

   // Example: Remove member
   const response = await fetch(`${API_URL}/members/${juntaId}/${memberId}`, {
     method: 'DELETE',
     headers: {
       'Authorization': `Bearer ${token}`,
     },
   });
   ```

2. Error Handling:
   ```javascript
   const handleRemoveMember = async (juntaId, memberId) => {
     try {
       const response = await fetch(`${API_URL}/members/${juntaId}/${memberId}`, {
         method: 'DELETE',
         headers: {
           'Authorization': `Bearer ${token}`,
         },
       });

       if (!response.ok) {
         const error = await response.json();
         throw new Error(error.message || 'Failed to remove member');
       }

       // Handle success
       await refetchMembers();
     } catch (error) {
       console.error('Failed to remove member:', error);
       // Show error message to user
     }
   };
   ```

3. CORS Configuration:
   - Backend allows requests from http://localhost:3001
   - Credentials are allowed
   - All necessary HTTP methods enabled

4. Authentication:
   - Always include Bearer token in Authorization header
   - Token can be obtained from /api/health/dev-token for testing

5. Role-Based Access:
   - ADMIN: Can manage all juntas and members
   - FACILITATOR: Can manage own juntas and their members
   - MEMBER: Can view junta details and member list
   - USER: Basic access only

Note: Replace placeholders:
- your_token_here: Use actual token from /api/health/dev-token
- JUNTA_ID: Use actual junta ID
- MEMBER_ID: Use actual member ID
- DOCUMENT_NUMBER: Use actual document number when adding members
